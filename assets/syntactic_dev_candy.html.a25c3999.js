import{r as t,o as r,c,a as e,e as a,F as p,d as o,b as n}from"./app.5b6d861f.js";import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";const i={},d=o(`<h1 id="syntactic-development-candy" tabindex="-1"><a class="header-anchor" href="#syntactic-development-candy" aria-hidden="true">#</a> Syntactic development candy</h1><p>To type in the <code>npx</code> commands might feel a bit cumbersome. One way to save on typing is by relying on aliases. For the NodeJS app, they can be configured, e.g. within the <code>package.json</code> as attributes to the <code>scripts</code> dictionary,</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
    ...
    
    <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;docs:dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vuepress dev docs&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;docs:build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vuepress build docs&quot;</span>
    <span class="token punctuation">}</span>

    ...
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>`,3),u=n("As an alternative, one can rely on (abuse?) the build tool (GNU)Make and configure some "),h={href:"https://www.gnu.org/software/make/manual/html_node/Phony-Targets.html",target:"_blank",rel:"noopener noreferrer"},b=e("code",null,".PHONY",-1),m=n(" targets in a "),_=e("code",null,"makefile",-1),g=n(", e.g.,"),k=o(`<div class="language-makefile ext-makefile line-numbers-mode"><pre class="language-makefile"><code><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> docs_dev docs_build

<span class="token target symbol">docs_dev</span><span class="token punctuation">:</span> 
    npx vuepress dev docs

<span class="token target symbol">docs_build</span><span class="token punctuation">:</span>
    npx vuepress build docs
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>For this purpose, to capture your script snippets in a <code>makefile</code>, can be considered a more generic approach, independent of the app&#39;s language and framework, whereas the <code>package.json</code> approach is related to NodeJS. The trade off is that you rely on another tool: a more bloated setup since you have more than you maybe need for the project at hand.</p>`,2),f=n("Yet another alternative is relying on your "),v={href:"https://tldp.org/LDP/abs/html/aliases.html",target:"_blank",rel:"noopener noreferrer"},y=n("shell's profile (BASH)"),w=n(', however the scope of the aliases will than be "user wide" (or even system wide), instead of being scoped for the project. Unfortunately a tool like '),q=e("code",null,"direnv",-1),x=n(" cannot come to the rescue,"),j={href:"https://direnv.net/#faq",target:"_blank",rel:"noopener noreferrer"},N=n("... aliases and functions are not exportable right now."),S=n("As soon as this would be possible "),B={href:"https://github.com/direnv/direnv/issues/73",target:"_blank",rel:"noopener noreferrer"},E=e("code",null,"direnv",-1),F=n(" + shell aliases"),H=n(" could be viewed, like Make, as a more generic approach, independent of the app's language and framework. However, with Make you introduce another DSL (domain specific language), although in many cases looking similar to your shell's language, with "),L=e("code",null,"direnv",-1),P=n(" this is not the case: no new language (elements) required to learn.");function T(V,A){const s=t("ExternalLinkIcon");return r(),c(p,null,[d,e("p",null,[u,e("a",h,[b,m,_,a(s)]),g]),k,e("p",null,[f,e("a",v,[y,a(s)]),w,q,x]),e("blockquote",null,[e("p",null,[e("a",j,[N,a(s)])])]),e("p",null,[S,e("a",B,[E,F,a(s)]),H,L,P])],64)}var Y=l(i,[["render",T]]);export{Y as default};
